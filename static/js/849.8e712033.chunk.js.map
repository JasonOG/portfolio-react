{"version":3,"file":"static/js/849.8e712033.chunk.js","mappings":"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","sources":["components/forms/ContactForm.tsx","pages/ContactPage.tsx"],"sourcesContent":["import React from 'react';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport { useNavigate } from 'react-router-dom';\nimport { ContactFormValues } from 'types';\n\nconst ContactForm: React.FC = () => {\n  const navigate = useNavigate();\n\n  // Form validation schema\n  const validationSchema = Yup.object({\n    firstName: Yup.string().required('First name is required'),\n    lastName: Yup.string().required('Last name is required'),\n    email: Yup.string().email('Invalid email address').required('Email is required'),\n    message: Yup.string().required('Message is required')\n  });\n\n  // Initialize formik\n  const formik = useFormik<ContactFormValues>({\n    initialValues: {\n      firstName: '',\n      lastName: '',\n      email: '',\n      phone: '',\n      message: ''\n    },\n    validationSchema,\n    onSubmit: async (values) => {\n      try {\n        // Replace this with your form submission logic\n        // For now, we'll just simulate a submission with a timeout\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        \n        // Redirect to success page after form submission\n        navigate('/success');\n      } catch (error) {\n        console.error('Error submitting form:', error);\n      }\n    }\n  });\n\n  return (\n    <form className=\"row g-3\" onSubmit={formik.handleSubmit}>\n      <input type=\"text\" name=\"_honey\" style={{ display: 'none' }} />\n      <input type=\"hidden\" name=\"_captcha\" value=\"false\" />\n      <input type=\"hidden\" name=\"_next\" value=\"https://jasonog.github.io/portfolio/success.html\" />\n      \n      <div className=\"col-md-6\">\n        <label htmlFor=\"firstName\" className=\"form-label\">First Name</label>\n        <input\n          type=\"text\"\n          className={`form-control ${formik.touched.firstName && formik.errors.firstName ? 'is-invalid' : ''}`}\n          id=\"firstName\"\n          name=\"firstName\"\n          value={formik.values.firstName}\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n        />\n        {formik.touched.firstName && formik.errors.firstName && (\n          <div className=\"invalid-feedback\">{formik.errors.firstName}</div>\n        )}\n      </div>\n      \n      <div className=\"col-md-6\">\n        <label htmlFor=\"lastName\" className=\"form-label\">Last Name</label>\n        <input\n          type=\"text\"\n          className={`form-control ${formik.touched.lastName && formik.errors.lastName ? 'is-invalid' : ''}`}\n          id=\"lastName\"\n          name=\"lastName\"\n          value={formik.values.lastName}\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n        />\n        {formik.touched.lastName && formik.errors.lastName && (\n          <div className=\"invalid-feedback\">{formik.errors.lastName}</div>\n        )}\n      </div>\n      \n      <div className=\"col-md-8\">\n        <label htmlFor=\"email\" className=\"form-label\">Email</label>\n        <input\n          type=\"email\"\n          className={`form-control ${formik.touched.email && formik.errors.email ? 'is-invalid' : ''}`}\n          id=\"email\"\n          name=\"email\"\n          value={formik.values.email}\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n        />\n        {formik.touched.email && formik.errors.email && (\n          <div className=\"invalid-feedback\">{formik.errors.email}</div>\n        )}\n      </div>\n      \n      <div className=\"col-md-4\">\n        <label htmlFor=\"phone\" className=\"form-label\">Phone (optional)</label>\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          id=\"phone\"\n          name=\"phone\"\n          value={formik.values.phone}\n          onChange={formik.handleChange}\n        />\n      </div>\n      \n      <div className=\"col-md-12\">\n        <label htmlFor=\"message\" className=\"form-label\">Your message</label>\n        <textarea\n          className={`form-control ${formik.touched.message && formik.errors.message ? 'is-invalid' : ''}`}\n          id=\"message\"\n          name=\"message\"\n          rows={4}\n          value={formik.values.message}\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n        ></textarea>\n        {formik.touched.message && formik.errors.message && (\n          <div className=\"invalid-feedback\">{formik.errors.message}</div>\n        )}\n      </div>\n      \n      <div className=\"col-md-12\" style={{ textAlign: 'center' }}>\n        <button\n          type=\"submit\"\n          className=\"shadow btnEmail btn-primary rounded-pill btn-lg\"\n          disabled={formik.isSubmitting}\n        >\n          {formik.isSubmitting ? 'Sending...' : 'Send'}\n        </button>\n      </div>\n    </form>\n  );\n};\n\nexport default ContactForm;","import React from 'react';\nimport { motion } from 'framer-motion';\nimport ContactForm from 'components/forms/ContactForm';\n\n// Animation variants\nconst pageVariants = {\n  initial: { opacity: 0, y: 20 },\n  in: { opacity: 1, y: 0 },\n  out: { opacity: 0, y: -20 }\n};\n\nconst pageTransition = {\n  type: 'tween',\n  ease: 'anticipate',\n  duration: 0.5\n};\n\nconst ContactPage: React.FC = () => {\n  return (\n    <motion.div\n      initial=\"initial\"\n      animate=\"in\"\n      exit=\"out\"\n      variants={pageVariants}\n      transition={pageTransition}\n    >\n      <section id=\"Contact Me\">\n        <div>\n          <div className=\"col-md-12\" style={{ textAlign: 'center' }}>\n            <h1>Contact Me.</h1>\n            <h4>I'd love to hear from you.</h4>\n            <p className=\"p2\">\n              If you'd like to reach out professionally or you just have some questions about technology in general, \n              I would be delighted to help you!\n            </p>\n          </div>\n\n          <div className=\"container mt-5\">\n            <ContactForm />\n          </div>\n        </div>\n      </section>\n    </motion.div>\n  );\n};\n\nexport default ContactPage;"],"names":["ContactForm","navigate","useNavigate","validationSchema","Yup","firstName","required","lastName","email","message","formik","useFormik","initialValues","phone","onSubmit","async","Promise","resolve","setTimeout","error","console","_jsxs","className","handleSubmit","children","_jsx","type","name","style","display","value","htmlFor","touched","errors","id","values","onChange","handleChange","onBlur","handleBlur","rows","textAlign","disabled","isSubmitting","pageVariants","initial","opacity","y","in","out","pageTransition","ease","duration","ContactPage","motion","div","animate","exit","variants","transition"],"sourceRoot":""}